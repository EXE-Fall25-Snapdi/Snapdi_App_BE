// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;

namespace Snapdi.Repositories.Models;

public partial class Snapdi_DB_v1_Context : DbContext
{
    public Snapdi_DB_v1_Context(DbContextOptions<Snapdi_DB_v1_Context> options)
        : base(options)
    {
    }

    public virtual DbSet<Blog> Blogs { get; set; }

    public virtual DbSet<Booking> Bookings { get; set; }

    public virtual DbSet<BookingStatus> BookingStatuses { get; set; }

    public virtual DbSet<Conversation> Conversations { get; set; }

    public virtual DbSet<ConversationParticipant> ConversationParticipants { get; set; }

    public virtual DbSet<FeePolicy> FeePolicies { get; set; }

    public virtual DbSet<Keyword> Keywords { get; set; }

    public virtual DbSet<Message> Messages { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<PaymentStatus> PaymentStatuses { get; set; }

    public virtual DbSet<PhotoEquipment> PhotoEquipments { get; set; }

    public virtual DbSet<PhotoPortfolio> PhotoPortfolios { get; set; }

    public virtual DbSet<PhotographerProfile> PhotographerProfiles { get; set; }

    public virtual DbSet<Review> Reviews { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Style> Styles { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<Voucher> Vouchers { get; set; }

    public virtual DbSet<VoucherUsage> VoucherUsages { get; set; }

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection")).UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Blog>(entity =>
        {
            entity.HasKey(e => e.BlogId).HasName("PK__Blog__54379E5072F6F2FD");

            entity.ToTable("Blog");

            entity.Property(e => e.BlogId).HasColumnName("BlogID");
            entity.Property(e => e.AuthorId).HasColumnName("AuthorID");
            entity.Property(e => e.Content).IsRequired();
            entity.Property(e => e.CreateAt).HasColumnType("datetime");
            entity.Property(e => e.KeywordId).HasColumnName("KeywordID");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.UpdateAt).HasColumnType("datetime");

            entity.HasOne(d => d.Author).WithMany(p => p.Blogs)
                .HasForeignKey(d => d.AuthorId)
                .HasConstraintName("FK__Blog__AuthorID__403A8C7D");

            entity.HasOne(d => d.Keyword).WithMany(p => p.Blogs)
                .HasForeignKey(d => d.KeywordId)
                .HasConstraintName("FK__Blog__KeywordID__3F466844");
        });

        modelBuilder.Entity<Booking>(entity =>
        {
            entity.HasKey(e => e.BookingId).HasName("PK__Booking__73951ACDEF6DDCD6");

            entity.ToTable("Booking");

            entity.Property(e => e.BookingId).HasColumnName("BookingID");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.LocationAddress).HasMaxLength(255);
            entity.Property(e => e.LocationCity).HasMaxLength(100);
            entity.Property(e => e.PhotographerId).HasColumnName("PhotographerID");
            entity.Property(e => e.ScheduleAt).HasColumnType("datetime");
            entity.Property(e => e.StatusId).HasColumnName("StatusID");
            entity.Property(e => e.StyleId).HasColumnName("StyleID");

            entity.HasOne(d => d.Customer).WithMany(p => p.BookingCustomers)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK__Booking__Custome__5070F446");

            entity.HasOne(d => d.Photographer).WithMany(p => p.BookingPhotographers)
                .HasForeignKey(d => d.PhotographerId)
                .HasConstraintName("FK__Booking__Photogr__5165187F");

            entity.HasOne(d => d.Status).WithMany(p => p.Bookings)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("FK__Booking__StatusI__534D60F1");

            entity.HasOne(d => d.Style).WithMany(p => p.Bookings)
                .HasForeignKey(d => d.StyleId)
                .HasConstraintName("FK__Booking__StyleID__52593CB8");
        });

        modelBuilder.Entity<BookingStatus>(entity =>
        {
            entity.HasKey(e => e.StatusId).HasName("PK__BookingS__C8EE2043B9A333D1");

            entity.ToTable("BookingStatus");

            entity.Property(e => e.StatusId).HasColumnName("StatusID");
            entity.Property(e => e.StatusName)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<Conversation>(entity =>
        {
            entity.HasKey(e => e.ConversationId).HasName("PK__Conversa__C050D8973A851133");

            entity.Property(e => e.ConversationId).HasColumnName("ConversationID");
            entity.Property(e => e.CreateAt).HasColumnType("datetime");
            entity.Property(e => e.Type).HasMaxLength(50);
        });

        modelBuilder.Entity<ConversationParticipant>(entity =>
        {
            entity.HasKey(e => new { e.ConversationId, e.UserId }).HasName("PK__Conversa__1128545D098A83ED");

            entity.Property(e => e.ConversationId).HasColumnName("ConversationID");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.JoinedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Conversation).WithMany(p => p.ConversationParticipants)
                .HasForeignKey(d => d.ConversationId)
                .HasConstraintName("FK__Conversat__Conve__6D0D32F4");

            entity.HasOne(d => d.User).WithMany(p => p.ConversationParticipants)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__Conversat__UserI__6E01572D");
        });

        modelBuilder.Entity<FeePolicy>(entity =>
        {
            entity.HasKey(e => e.FeePolicyId).HasName("PK__FeePolic__ADCA966A98E150F1");

            entity.ToTable("FeePolicy");

            entity.Property(e => e.FeePolicyId).HasColumnName("FeePolicyID");
            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.TransactionType).HasMaxLength(100);
        });

        modelBuilder.Entity<Keyword>(entity =>
        {
            entity.HasKey(e => e.KeywordId).HasName("PK__Keyword__37C135C1A2111A3A");

            entity.ToTable("Keyword");

            entity.Property(e => e.KeywordId).HasColumnName("KeywordID");
            entity.Property(e => e.Keyword1)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("Keyword");
        });

        modelBuilder.Entity<Message>(entity =>
        {
            entity.HasKey(e => e.MessageId).HasName("PK__Messages__C87C037C9B095AEA");

            entity.Property(e => e.MessageId).HasColumnName("MessageID");
            entity.Property(e => e.Content).IsRequired();
            entity.Property(e => e.ConversationId).HasColumnName("ConversationID");
            entity.Property(e => e.ExpiredDate).HasColumnType("datetime");
            entity.Property(e => e.SendAt).HasColumnType("datetime");
            entity.Property(e => e.SenderId).HasColumnName("SenderID");
            entity.Property(e => e.Status).HasMaxLength(50);

            entity.HasOne(d => d.Conversation).WithMany(p => p.Messages)
                .HasForeignKey(d => d.ConversationId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK__Messages__Conver__70DDC3D8");

            entity.HasOne(d => d.Sender).WithMany(p => p.Messages)
                .HasForeignKey(d => d.SenderId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK__Messages__Sender__71D1E811");
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.PaymentId).HasName("PK__Payment__9B556A58DD2BECB0");

            entity.ToTable("Payment");

            entity.Property(e => e.PaymentId).HasColumnName("PaymentID");
            entity.Property(e => e.BookingId).HasColumnName("BookingID");
            entity.Property(e => e.FeePolicyId).HasColumnName("FeePolicyID");
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentStatusId).HasColumnName("PaymentStatusID");
            entity.Property(e => e.TransactionMethod).HasMaxLength(50);
            entity.Property(e => e.TransactionReference).HasMaxLength(255);

            entity.HasOne(d => d.Booking).WithMany(p => p.Payments)
                .HasForeignKey(d => d.BookingId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK__Payment__Booking__66603565");

            entity.HasOne(d => d.FeePolicy).WithMany(p => p.Payments)
                .HasForeignKey(d => d.FeePolicyId)
                .HasConstraintName("FK__Payment__FeePoli__6754599E");

            entity.HasOne(d => d.PaymentStatus).WithMany(p => p.Payments)
                .HasForeignKey(d => d.PaymentStatusId)
                .HasConstraintName("FK__Payment__Payment__68487DD7");
        });

        modelBuilder.Entity<PaymentStatus>(entity =>
        {
            entity.HasKey(e => e.PaymentStatusId).HasName("PK__PaymentS__34F8AC1F81F507B4");

            entity.ToTable("PaymentStatus");

            entity.Property(e => e.PaymentStatusId).HasColumnName("PaymentStatusID");
            entity.Property(e => e.StatusName)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<PhotoEquipment>(entity =>
        {
            entity.HasKey(e => e.EquipmentId).HasName("PK__PhotoEqu__3447459911FFB56D");

            entity.ToTable("PhotoEquipment");

            entity.Property(e => e.EquipmentId).HasColumnName("EquipmentID");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.PhotoEquipments)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK__PhotoEqui__UserI__4316F928");
        });

        modelBuilder.Entity<PhotoPortfolio>(entity =>
        {
            entity.HasKey(e => e.PhotoPortfolioId).HasName("PK__PhotoPor__75BE09A87917D7ED");

            entity.ToTable("PhotoPortfolio");

            entity.Property(e => e.PhotoPortfolioId).HasColumnName("PhotoPortfolioID");
            entity.Property(e => e.PhotoUrl)
                .IsRequired()
                .HasMaxLength(500);
        });

        modelBuilder.Entity<PhotographerProfile>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__Photogra__1788CCAC592FB403");

            entity.ToTable("PhotographerProfile");

            entity.Property(e => e.UserId)
                .ValueGeneratedNever()
                .HasColumnName("UserID");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.EquipmentId).HasColumnName("EquipmentID");
            entity.Property(e => e.PhotoPortfolioId).HasColumnName("PhotoPortfolioID");

            entity.HasOne(d => d.Equipment).WithMany(p => p.PhotographerProfiles)
                .HasForeignKey(d => d.EquipmentId)
                .HasConstraintName("FK__Photograp__Equip__48CFD27E");

            entity.HasOne(d => d.PhotoPortfolio).WithMany(p => p.PhotographerProfiles)
                .HasForeignKey(d => d.PhotoPortfolioId)
                .HasConstraintName("FK__Photograp__Photo__49C3F6B7");

            entity.HasOne(d => d.User).WithOne(p => p.PhotographerProfile)
                .HasForeignKey<PhotographerProfile>(d => d.UserId)
                .HasConstraintName("FK__Photograp__UserI__47DBAE45");
        });

        modelBuilder.Entity<Review>(entity =>
        {
            entity.HasKey(e => e.ReviewId).HasName("PK__Review__74BC79AECA107F07");

            entity.ToTable("Review");

            entity.Property(e => e.ReviewId).HasColumnName("ReviewID");
            entity.Property(e => e.BookingId).HasColumnName("BookingID");
            entity.Property(e => e.CreateAt).HasColumnType("datetime");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");

            entity.HasOne(d => d.Booking).WithMany(p => p.Reviews)
                .HasForeignKey(d => d.BookingId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK__Review__BookingI__5629CD9C");

            entity.HasOne(d => d.FromUser).WithMany(p => p.ReviewFromUsers)
                .HasForeignKey(d => d.FromUserId)
                .HasConstraintName("FK__Review__FromUser__571DF1D5");

            entity.HasOne(d => d.ToUser).WithMany(p => p.ReviewToUsers)
                .HasForeignKey(d => d.ToUserId)
                .HasConstraintName("FK__Review__ToUserID__5812160E");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("PK__Role__8AFACE3A930580F1");

            entity.ToTable("Role");

            entity.Property(e => e.RoleId).HasColumnName("RoleID");
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<Style>(entity =>
        {
            entity.HasKey(e => e.StyleId).HasName("PK__Styles__8AD147A0CADD6713");

            entity.Property(e => e.StyleId).HasColumnName("StyleID");
            entity.Property(e => e.StyleName)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__User__1788CCACF7BC8D17");

            entity.ToTable("User");

            entity.HasIndex(e => e.Email, "UQ__User__A9D1053470689A95").IsUnique();

            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.AvatarUrl).HasMaxLength(255);
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.ExpiredRefreshTokenAt).HasColumnType("datetime");
            entity.Property(e => e.LocationAddress).HasMaxLength(255);
            entity.Property(e => e.LocationCity).HasMaxLength(100);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Phone).HasMaxLength(50);
            entity.Property(e => e.RefreshToken).HasMaxLength(255);
            entity.Property(e => e.RoleId).HasColumnName("RoleID");

            entity.HasOne(d => d.Role).WithMany(p => p.Users)
                .HasForeignKey(d => d.RoleId)
                .HasConstraintName("FK__User__RoleID__3C69FB99");
        });

        modelBuilder.Entity<Voucher>(entity =>
        {
            entity.HasKey(e => e.VoucherId).HasName("PK__Voucher__3AEE79C16E5C8A0B");

            entity.ToTable("Voucher");

            entity.HasIndex(e => e.Code, "UQ__Voucher__A25C5AA75B0CA97B").IsUnique();

            entity.Property(e => e.VoucherId).HasColumnName("VoucherID");
            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.DiscountType).HasMaxLength(50);
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<VoucherUsage>(entity =>
        {
            entity.HasKey(e => e.VoucherUsageId).HasName("PK__VoucherU__4264F82BB0FE34E7");

            entity.ToTable("VoucherUsage");

            entity.Property(e => e.VoucherUsageId).HasColumnName("VoucherUsageID");
            entity.Property(e => e.BookingId).HasColumnName("BookingID");
            entity.Property(e => e.UsedAt).HasColumnType("datetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.VoucherId).HasColumnName("VoucherID");

            entity.HasOne(d => d.Booking).WithMany(p => p.VoucherUsages)
                .HasForeignKey(d => d.BookingId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK__VoucherUs__Booki__5DCAEF64");

            entity.HasOne(d => d.User).WithMany(p => p.VoucherUsages)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK__VoucherUs__UserI__5FB337D6");

            entity.HasOne(d => d.Voucher).WithMany(p => p.VoucherUsages)
                .HasForeignKey(d => d.VoucherId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK__VoucherUs__Vouch__5EBF139D");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}